/* ======= script.js ======= */

/* ===== DADOS DO JOGADOR ===== */
let player = {
  name: "",
  hp: 100, maxHp: 100,
  mana: 50, maxMana: 50,
  hunger: 100, sleep: 100, energy: 100,
  strength: 10, intelligence: 10, skill: 10, defense: 10, vigor: 8,
  powerType: null,
  defending: false,
  status: {} // e.g. { burning: {turns:3, value:3}, frozen: {turns:2} }
};

/* ===== RELA√á√ïES DO JOGADOR ===== */

let friendships = {
  "Leandro": { know: false, value: 0, description: ""},
  "Jo√£o Jos√©": { know: false, value: 0, description: ""},
  //adicionar mais aqui
};
/**
 * @param {string} name - nome de quem ter√° a amizade alterada;
 * @param {number} amount - valor a ser alterado
 */
function changeFriendship(name, amount){
  if(!friendships[name]) return;
  if(friendships[name].value <0) friendships[name].value = Math.min(100, Math.max(0, friendships[name].value - amount));
  else friendships[name].value = Math.min(100, Math.max(0, friendships[name].value + amount));

  //atualiza descri√ß√£o autom√°ticamente
  const val = friendships[name].value;
  if(val < 100) friendships[name].description = "Odeia voc√™";
    else if(val < 50) friendships[name].description = "N√£o gosta de voc√™";
    else if(val < 20) friendships[name].description = "N√£o gosta muito de voc√™";
    else if(val < 50) friendships[name].description = "Gosta de voc√™";
    else if(val < 100) friendships[name].description = "Confia em voc√™";
}
/* ========== AUXILIARES DE STATUS ========== */
function applyStatus(entity, statusName, turns, value = null) {
  if (!entity.status) entity.status = {};
  entity.status[statusName] = { turns: turns, value: value };
}

function hasStatus(entity, name) {
  return entity.status && entity.status[name] && entity.status[name].turns > 0;
}

function clearStatus(entity, name) {
  if (entity.status && entity.status[name]) delete entity.status[name];
}

/* Processa DOTs e efeitos no come√ßo do turno; retorna true se pode agir */
function processStatuses(entity, who) {
  if (!entity.status) entity.status = {};

  // DOTs
  if (hasStatus(entity, "burning")) {
    const dmg = entity.status.burning.value || Math.max(2, Math.round(entity.maxHp * 0.05));
    entity.hp = Math.max(0, entity.hp - dmg);
    entity.status.burning.turns--;
    if (entity.status.burning.turns <= 0) clearStatus(entity, "burning");
    log(`${who === "player" ? "Voc√™" : entity.name} sofre ${dmg} de queimadura.`);
  }
  if (hasStatus(entity, "bleeding")) {
    const dmg = entity.status.bleeding.value || (8 + Math.floor(Math.random() * 3));
    entity.hp = Math.max(0, entity.hp - dmg);
    entity.status.bleeding.turns--;
    if (entity.status.bleeding.turns <= 0) clearStatus(entity, "bleeding");
    log(`${who === "player" ? "Voc√™" : entity.name} perde ${dmg} por sangramento.`);
  }

  // reduzir turnos de statuses passivos
  ["blinded","frozen","confused"].forEach(s => {
    if (hasStatus(entity, s)) {
      entity.status[s].turns--;
      if (entity.status[s].turns <= 0) clearStatus(entity, s);
    }
  });

  // paralizado (perde o turno garantidamente)
  if(hasStatus(entity, "paralizado")){
    log(`${who === "player" ? "voc√™" : entity.name} est√° paralizado e perde o turno`);
    entity.status.paralizado.turns --;
    if(entity.status.paralizado.turn <=0){
      clearStatus(entity, "paralizado");
      return false; //perde o turno
    }
  }
  // Confusion check (50% perder o turno)
  if (hasStatus(entity, "confused")) {
    const lose = Math.random() < 0.5;
    if (lose) {
      log(`${who === "player" ? "Voc√™" : entity.name} est√° confuso e perde o turno!`);
      return false;
    }
  }

  return entity.hp > 0;
}

/* Efeito visual: shake na barra de HP da v√≠tima */
function hpShake(targetStr) {
  // targetStr: "player" ou "enemy"
  const id = targetStr === "player" ? "player-hp-fill" : "enemy-hp-fill";
  const el = document.getElementById(id);
  if (!el) return;
  el.classList.add("hp-shake");
  setTimeout(() => el.classList.remove("hp-shake"), 350);
}

/* ========== UI / SIDEBAR / TEMPO ========== */
function updateSidebar() {
  const setWidth = (id, pct) => {
    const el = document.getElementById(id);
    if (el) el.style.width = Math.max(0, Math.min(100, pct)) + "%";
  };
  if (document.getElementById("bar-hp")) setWidth("bar-hp", (player.hp / player.maxHp) * 100);
  if (document.getElementById("bar-mana")) setWidth("bar-mana", (player.mana / player.maxMana) * 100);
  if (document.getElementById("bar-hunger")) setWidth("bar-hunger", player.hunger);
  if (document.getElementById("bar-sleep")) setWidth("bar-sleep", player.sleep);
  if (document.getElementById("attr-talent")) setWidth("attr-talent"), player.powerType;
  
  const setText = (id, v) => { const e = document.getElementById(id); if (e) e.innerText = v; };
  setText("sidebar-name", player.name || "Jogador");
  setText("attr-strength", player.strength);
  setText("attr-int", player.intelligence);
  setText("attr-skill", player.skill);
  setText("attr-defense", player.defense);
  setText("attr-vigor", player.vigor);
  setText("attr-energy", Math.round(player.energy));
  setText("attr-talent", player.powerType);
}

/* ===== SISTEMA DE TEMPO ===== */

// jogo come√ßa numa quinta-feira, 1 de janeiro de 2025
let gameTime = {
  minute: 0,
  hour: 8,
  day: 1,
  month: 1,
  year: 2025,
  weekdayIndex: 3 // 0=Domingo 
};

const weekDays = ["Domingo", "Segunda-feira", "Ter√ßa-feira", "Quarta-feira", "Quinta-feira", "Sexta-feira", "S√°bado"];
const monthDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

function isLeapYear(year) {
  return (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);
}

function updateGameTimeDisplay() {
  const h = String(gameTime.hour).padStart(2, "0");
  const m = String(gameTime.minute).padStart(2, "0");
  const d = String(gameTime.day).padStart(2, "0");
  const mo = String(gameTime.month).padStart(2, "0");
  const y = gameTime.year;
  const weekday = weekDays[gameTime.weekdayIndex % 7];

  const elTime = document.getElementById("game-time");
  const elDate = document.getElementById("game-date");
  const elWeek = document.getElementById("game-weekday");

  if (elTime) elTime.innerText = `${h}:${m}`;
  if (elDate) elDate.innerText = `${d}/${mo}/${y}`;
  if (elWeek) elWeek.innerText = weekday;
}

/**
 * Avan√ßa o tempo do jogo.
 * @param {number} min - minutos a avan√ßar
 * @param {number} horas - horas a avan√ßar
 * @param {number} dias - dias a avan√ßar
 * @param {number} meses - meses a avan√ßar
 * @param {number} anos - anos a avan√ßar
 */
function advanceTime(min = 0, horas = 0, dias = 0, meses = 0, anos = 0) {
  gameTime.minute += min;
  while (gameTime.minute >= 60) {
    gameTime.minute -= 60;
    gameTime.hour++;
  }

  gameTime.hour += horas;
  while (gameTime.hour >= 24) {
    gameTime.hour -= 24;
    gameTime.day++;
    gameTime.weekdayIndex = (gameTime.weekdayIndex + 1) % 7;
  }

  gameTime.day += dias;
  gameTime.month += meses;
  gameTime.year += anos;

  // corrige dias e meses conforme o calend√°rio
  while (true) {
    let daysInMonth = monthDays[gameTime.month - 1];
    if (gameTime.month === 2 && isLeapYear(gameTime.year)) daysInMonth = 29;

    if (gameTime.day > daysInMonth) {
      gameTime.day -= daysInMonth;
      gameTime.month++;
      gameTime.weekdayIndex = (gameTime.weekdayIndex + 1) % 7;
      if (gameTime.month > 12) {
        gameTime.month = 1;
        gameTime.year++;
      }
    } else break;
  }
  updateNeeds(min + horas * 60);
  updateGameTimeDisplay();
}
/* ======= SIDEBAR RELA√á√ïES ======= */
document.getElementById("friends-btn").onclick = () =>{
  document.getElementById("friends-panel").classList.add("show");
  updateFriendshipUI();
};

document.getElementById("close-friends").onclick = () =>{
  document.getElementById("friends-panel").classList.remove("show");
};

function updateFriendshipUI(){
  const list = document.getElementById("friends-list");
  if(!list) return;
  list.innerHTML = "";
  let knowCount = 0;

  for(const name in friendships){
    const friend = friendships[name];
    if(!friend || !friend.know) continue;
    knowCount ++;
  
  const p = document.createElement("p");
  const val = typeof friend.value === "Number" ? friend.value: 0;
  const desc = friend.description || "N√£o tem uma opni√£o sobre voc√™";

  p.innerHTML = `<strong>${name}<\strong>: ${desc}.`;
  list.appendChild(p);
    }

    if(knowCount === 0){
      const msg = document.createElement("p");
      msg.innerText = "Voc√™ ainda n√£o conhece ningu√©m.";
      list.appendChild(p);
    }
  
}

function meetCharacter(name){
  if(!friendships[name]) return;
  friendships[name].know = true;
  updateFriendshipUI();
}
/* ======= GERENCIAMENTO DE NECESSIDADES ======= */

// Define as taxas de mudan√ßa a cada hora
const hungerDecayPerHour = 4;   // fome diminui 4% por hora
const sleepDecayPerHour = 3;    // sono diminui 3% por hora
const energyDecayPerHour = 5;   // energia diminui 5% por hora

/**
 * Atualiza fome, sono e energia conforme o tempo passou
 * @param {number} minutesPassed - minutos decorridos
 */
function updateNeeds(minutesPassed) {
  const hoursPassed = minutesPassed / 60;

  // Reduz necessidades conforme tempo
  player.hunger = Math.max(0, player.hunger - hungerDecayPerHour * hoursPassed);
  player.sleep = Math.max(0, player.sleep - sleepDecayPerHour * hoursPassed);
  player.energy = Math.max(0, player.energy - energyDecayPerHour * hoursPassed);

  // Se algum valor ficar muito baixo, afeta energia
  if (player.hunger < 20 || player.sleep < 20) {
    player.energy = Math.max(0, player.energy - 2);
  }

  // Atualiza as barras da interface
  updateSidebar();
  checkPlayerStatus();
}

/* ======= FEEDBACK DE ESTADO DO JOGADOR ======= */

let lastStatus = { hunger: "", sleep: "", energy: "" };

function checkPlayerStatus() {
  const h = player.hunger;
  const s = player.sleep;
  const e = player.energy;

  let msg = [];

  // === FOME ===
  if (h <= 10 && lastStatus.hunger !== "faminto") {
    msg.push("üçû Voc√™ est√° faminto! Precisa comer algo logo.");
    lastStatus.hunger = "faminto";
  } else if (h <= 30 && lastStatus.hunger !== "com fome") {
    msg.push("ü•™ Seu est√¥mago ronca... est√° ficando com fome.");
    lastStatus.hunger = "com fome";
  } else if (h > 60 && lastStatus.hunger !== "saciado") {
    msg.push("üòã Voc√™ se sente satisfeito e bem alimentado.");
    lastStatus.hunger = "saciado";
  }

  // === SONO ===
  if (s <= 10 && lastStatus.sleep !== "exausto") {
    msg.push("üí§ Voc√™ est√° exausto... precisa dormir urgentemente.");
    lastStatus.sleep = "exausto";
  } else if (s <= 30 && lastStatus.sleep !== "cansado") {
    msg.push("üò¥ Est√° ficando sonolento, talvez devesse descansar.");
    lastStatus.sleep = "cansado";
  } else if (s > 70 && lastStatus.sleep !== "descansado") {
    msg.push("‚òÄÔ∏è Voc√™ se sente descansado e alerta.");
    lastStatus.sleep = "descansado";
  }

  // === ENERGIA ===
  if (e <= 10 && lastStatus.energy !== "esgotado") {
    msg.push("‚ö° Voc√™ est√° sem energia... seus movimentos est√£o lentos.");
    lastStatus.energy = "esgotado";
  } else if (e <= 30 && lastStatus.energy !== "baixo") {
    msg.push("üíß Sua energia est√° baixa, voc√™ se sente fraco.");
    lastStatus.energy = "baixo";
  } else if (e > 70 && lastStatus.energy !== "cheio") {
    msg.push("üî• Voc√™ est√° cheio de energia e pronto para agir!");
    lastStatus.energy = "cheio";
  }

  // Exibe mensagens novas no log
  msg.forEach(m => log(m));
}

/* ======= SISTEMA DE DESCANSO ======= */
/**
 * O jogador dorme e recupera status conforme o tempo dormido.
 * @param {number} min - minutos dormidos
 * @param {number} hr - horas dormidas
 */
function dormir(min = 0, hr = 0) {
  const totalMin = min + hr * 60;
  const hours = totalMin / 60;

  // Recupera√ß√£o proporcional ao tempo dormido
  const hpRecovery = hours * 8;        // recupera 8 HP por hora
  const manaRecovery = hours * 6;      // recupera 6 Mana por hora
  const sleepRecovery = hours * 12;    // recupera 12% de sono por hora
  const energyRecovery = hours * 10;   // recupera 10% de energia por hora

  // Aplica recupera√ß√£o
  player.hp = Math.min(player.maxHp, player.hp + hpRecovery);
  player.mana = Math.min(player.maxMana, player.mana + manaRecovery);
  player.sleep = Math.min(100, player.sleep + sleepRecovery);
  player.energy = Math.min(100, player.energy + energyRecovery);

  // Dormir n√£o gasta fome, mas o tempo ainda passa
  advanceTime(min, hr);

  // Atualiza UI
  updateSidebar();

}
/* ========== COMER ========== */
/** 
* @param {string} foodName - nome da comida
* @param {number} foodValue - quanto recupera de fome
* @param {number} energyValue - o quanto recupera de energia
* @param {number} hpValue - o quanto recupera de vida
*/
function comer(foodName = "comida", foodValue = 20, energyValue = 10, hpValue = 5){
  //recupera√ß√£o de status
  player.hunger = Math.min(100, player.hunger + foodValue);
  player.energy = Math.min(100, player.energy + energyValue);
  player.hp = Math.min(player.maxHp, player.hp + hpValue);
  advanceTime(10);
  updateSidebar();

}
/* ========== SIDEBAR TOGGLE ========== */
const sidebar = document.getElementById("sidebar");
const toggleBtn = document.getElementById("toggle-sidebar");
function toggleSidebar() {
  if (!sidebar || !toggleBtn) return;
  sidebar.classList.toggle("expanded");
  toggleBtn.innerText = sidebar.classList.contains("expanded") ? "<" : ">";
}

/* ========== EFEITO: FADE-IN POR PAR√ÅGRAFO ========== */
function typeText(elementId, text, speed = 320, callback = null) {
  const el = document.getElementById(elementId);
  if (!el) { if (callback) callback(); return; }
  el.innerHTML = "";
  const paragraphs = text.split(/\n\s*\n/).filter(p => p.trim() !== "");
  paragraphs.forEach((p, i) => {
    const pEl = document.createElement("p");
    pEl.style.opacity = "0";
    pEl.style.transition = "opacity 0.6s ease, transform 0.35s ease";
    pEl.style.transform = "translateY(6px)";
    pEl.innerHTML = p.replace(/\n/g, "<br>");
    el.appendChild(pEl);
    setTimeout(() => { pEl.style.opacity = "1"; pEl.style.transform = "translateY(0)"; }, i * speed);
  });
  const total = paragraphs.length * speed + 600;
  setTimeout(() => { if (callback) callback(); }, total);
}

/* ========== TROCA DE CENA ========== */
/**
 * Cria um bot√£o que chama automaticamente a pr√≥xima fun√ß√£o da hist√≥ria.
 * @param {string} texto - texto do bot√£o
 * @param {string|function} proxima - nome da fun√ß√£o (string) ou refer√™ncia direta √† fun√ß√£o
 * @param {string} containerId - id do container de bot√µes (padr√£o: "powerChoices")
 */
function criarBotaoHistoria(texto, proxima, containerId = "powerChoices") {
  const btnDiv = document.getElementById(containerId);
  if (!btnDiv) return;

  const btn = document.createElement("button");
  btn.innerText = texto;

  // aceita tanto string quanto refer√™ncia direta √† fun√ß√£o
  if (typeof proxima === "string") {
    btn.onclick = () => {
      if (typeof window[proxima] === "function") window[proxima]();
      else console.warn(`Fun√ß√£o ${proxima} n√£o encontrada.`);
    };
  } else if (typeof proxima === "function") {
    btn.onclick = proxima;
  }

  btnDiv.appendChild(btn);
}

function clearButtons(containerId) {
  const btnDiv = document.getElementById(containerId);
  if (!btnDiv) return;
  Array.from(btnDiv.children).forEach(b => { b.style.transition = "opacity 200ms"; b.style.opacity = "0"; });
  setTimeout(() => { if (btnDiv) btnDiv.innerHTML = ""; }, 220);
}
function changeScene(text, buttonSetup, speed = 320, elementId = "powerText", buttonsContainerId = "powerChoices") {
  clearButtons(buttonsContainerId);
  const textEl = document.getElementById(elementId);
  if (!textEl) {
    const fakeDiv = document.getElementById(buttonsContainerId);
    if (fakeDiv) buttonSetup(fakeDiv);
    return;
  }
  textEl.innerHTML = "";
  typeText(elementId, text, speed, () => {
    const btnDiv = document.getElementById(buttonsContainerId);
    if (btnDiv) buttonSetup(btnDiv);
  });
}

function continueStory(text){
  const storyBox = document.getElementById("storyText");
  storyBox.innerHTML += `<p>${text}</p>`;
  startStory.scrollTop = startStory.scrollHeight;
}

function cleanChoices(){
  const choicesDiv = document.getElementById("choices");
  choicesDiv.innerHTML = "";
}

function showNextButton(action){
  const choicesDiv = document.getElementById("choices");
  const btn = document.createElement("button");
  btn.innerText = "Continuar";
  btn.onclick = action;
  choicesDiv.appendChild(btn);
}
/**
 * ===== ADICIONA BOT√ïES SEM APAGAR O CONTE√öDO NA TELA =====
 * @param {string[]} opcoes - lista de op√ß√µes {(texto, a√ß√£o)}
 * @param {string} containerId - id do container (defaut: "powerChoices")
 */

function adicionarEscolhasInline(opcoes, containerId = "powerChoices"){
  const container = document.createElement(containerId);
  if(!containerId);

  //remover todos os bot√µes anteriores
  container.innerHTML = "";

  opcoes.forEach(op =>{
    const btn = document.createElement("button");
    btn.innerText = op.texto;

    if(typeof op.acao === "string" && typeof window[op.acao] === "function"){
      btn.onclick = op.acao;
    }

    container.appendChild(btn);
  })
}
/* ========== INICIALIZA√á√ÉO (DOM ready) ========== */
document.addEventListener("DOMContentLoaded", () => {
  const startBtn = document.getElementById("startBtn");
  if (startBtn) {
    startBtn.addEventListener("click", () => {
      const name = (document.getElementById("playerNameInput") || {}).value || "";
      if (!name.trim()) return alert("Por favor, insira seu nome!");
      player.name = name.trim();
      document.getElementById("intro-screen").style.display = "none";
      document.getElementById("power-screen").style.display = "block";
      if (typeof discoverPower === "function") discoverPower();
      updateSidebar();
    });
  }

  if (toggleBtn) {
    toggleBtn.addEventListener("click", toggleSidebar);
    toggleBtn.addEventListener("touchstart", e => { e.preventDefault(); toggleSidebar(); });
  }

  updateSidebar();
  updateGameTimeDisplay();
});

/* ========== HIST√ìRIA ========== */
function discoverPower() {
  const powers = ["Pirocinese", "Criogenese", "Telecinese", "Eletrocinese"];
  player.powerType = powers[Math.floor(Math.random() * powers.length)];

  const story = `Tudo come√ßou quando voc√™ ainda era crian√ßa. 

Seus pais sempre contavam como sentiam que voc√™ era especial. 
Tudo aconteceu bem na sua inf√¢ncia ‚Äî voc√™ era uma crian√ßa normal e feliz. 

As coisas come√ßaram a mudar quando as dores de cabe√ßa come√ßaram. 
Seus pais mudaram do dia para a noite; voc√™ j√° n√£o podia mais sair de casa. 
Fazia exerc√≠cios f√≠sicos todos os dias e come√ßou a se sentir preso em sua pr√≥pria casa. 

Mas voc√™, era uma crian√ßa obediente e que amava seus pais, ent√£o sempre obedecia. 
Com o passar dos anos, come√ßou a adquirir m√∫sculos mais definidos e, quando raramente sa√≠a, 
n√£o conseguia mais se entrosar com pessoas facilmente. Foi como um baque. 

"Eu n√£o sou normal" ‚Äî era o que se passava na sua cabe√ßa sempre que sa√≠a. 
Voc√™ via crian√ßas sorrindo e aproveitando suas inf√¢ncias, algo que voc√™, por algum motivo que nunca soube, 
perdeu do dia para a noite. Mas isso ainda n√£o foi o suficiente para te abalar. 
Afinal, seus pais te amam e cuidam de voc√™, e isso era tudo o que voc√™ precisava.`;

  changeScene(story, () =>{
    criarBotaoHistoria("Continuar", continueBackStory);
  })
}

function continueBackStory() {
  const story = `Com os anos se passando, voc√™ crescia e seus pais envelheciam.

Quando voc√™ fez 18 anos, seu presente de anivers√°rio n√£o foi algo que voc√™ gosta de lembrar.

Mas mesmo assim, voc√™ lembra, de cada detalhe.

O dia estava claro e ensolarado, n√£o combinava nem um pouco com o que voc√™ estava prestes a ver 
quando abrisse a porta do quarto de seus pais.

Seus corpos frios e sem cor foram o primeiro sinal que voc√™ teve. 
Quando se aproximou, p√¥de sentir que eles j√° n√£o mais estavam neste mundo. 
Eles te ensinaram a medir o pulso, e voc√™ fez isso ‚Äî o que s√≥ confirmou suas suspeitas.

Eles estavam mortos.`;

  changeScene(story, () =>{
    criarBotaoHistoria("Continuar", backStory2);
  })
}

function backStory2(){
  
  let story = "";

  switch (player.powerType) {
    case "Pirocinese":
      story = `A sala come√ßou a ficar mais quente, tudo parecia estar queimando, a raiva, a confus√£o, destruindo sua mente.
      
      Voc√™ se lembra dos momentos que passou com seus pais, os momentos felizes, os momentos tristes, tudo, um mar de mem√≥rias inunda sua mente e a percep√ß√£o de que nada disso vai voltar faz com que voc√™ sinta que est√° morto por dentro.
      
      Seu corpo esquenta, est√° muito quente, "por que est√° t√£o quente?" voc√™ se pergunta at√© sentir l√°grimas cairem e queimar seu rosto, evaporando antes mesmo de tocar sua bochecha, voc√™ grita de dor, seu rosto queimando, a dor n√£o para, cada l√°grima √© uma dor diferente.
      
      Voc√™ tenta se acalmar, fecha os olhos e respira fundo, pensando no abra√ßo de sua m√£e, tentando enganar a sua mente de que tudo est√° bem.
      
      Voc√™ consegue se acalmar aos poucos, ent√£o abre os olhos, e novamente, mais uma cena de terror.
      
      O quarto est√° carbonizado, suas roupas em frangalhos, voc√™ sente dentro de voc√™...
      
      A sua habilidade, √© Pirocinese.`
      
      break;
    case "Criogenese":
      story = `A sala come√ßa a esfriar, tudo come√ßa a ficar frio, voc√™ sente seu pr√≥prio corpo ficando frio, sua respira√ß√£o o unico vapor quente na sala.
      
      A princ√≠pio voc√™ acha que isso √© apenas dor do luto. Mas quando voc√™ come√ßa a chorar, escuta um barulho no ch√£o, ao olhar, suas l√°grimas ao ca√≠rem se quebram, congeladas.
      
      Voc√™ se assuta com essa vis√£o, tocando por estinto em seu rosto e sentindo o qu√£o frio est√°.
      
      Caindo sentado em uma pilha de cacos de gelo quebrado, sua respira√ß√£o fica irregular, seu cora√ß√£o apertado, tentando retomar o controle voc√™ ouve um barulho ensurdecedor e deixa um grito irromper da sua garganta.
      
      Quando se d√° conta, todo o quarto est√° congelado, gelo saindo por toda parte.
      
      Apesar do medo, algo dentro de voc√™ se alegra ao ver o lugar, quase como a sensa√ß√£o de ver um trabalho que concluiu, voc√™ sente dentro de voc√™...
      
      A sua habilidade √© Criogenese.`;

      break;

      case "Telecinese":
        story = `Um barulho ensurdecedor que faz seu c√©rebro chacolahar e ent√£o voc√™ est√° no ch√£o, gritando de agonia.
        
        L√°grimas escorrendo dos seus olhos, seu corpo se contorcendo at√© o barulho come√ßar a ficar mais n√≠tido... Vozes. Milhares de vozes, sua cabe√ßa parece que vai explodir.
        
        Voc√™ coloca as m√£os nos ouvidos inutilmente tentando abafar o som, mas √© imposs√≠vel, a dor √© tanto que sua mente entorpece.
        
        Por um segundo as vozes passam, e esse tempo √© suficente para voc√™ perceber o seu arredor...
        
        Tudo est√° flutuando, inclusive voc√™, a c√¥moda, o guarda-roupas, a cama em que seus pais estavam deitados antes, que agora flutuam por cima.
        
        Seus olhos se arregalam, confus√£o sendo agora a √∫nica coisa que passa por sua mente.
        
        Voc√™ respira e fecha os olhos, tentando se concentrar e lentamente, come√ßa a sentir que est√° descendo at√© o ch√£o.
        
        Quando abre os olhos de novo, tudo est√° de volta no lugar, e voc√™ sente, no fundo do seu √¢mago:
        
        A sua habilidade √© Telecinese.`;

        break;
      
      case "Eletrocinese":
        story = `O som de um zumbido preenche seus ouvidos, t√£o alto que parece vir de dentro da sua cabe√ßa.

          Voc√™ sente algo percorrendo seu corpo ‚Äî r√°pido, imprevis√≠vel, como se suas veias estivessem vivas. 
          Ao olhar para suas m√£os, percebe pequenas fa√≠scas estalando entre os dedos.

          Um lampejo de medo te domina. O ar ao redor vibra, e o cheiro de queimado invade o quarto. 
          As l√¢mpadas explodem uma a uma, e as fa√≠scas se transformam em descargas que percorrem as paredes.

          Com o cora√ß√£o acelerado, voc√™ respira fundo, tentando controlar a corrente el√©trica que agora corre dentro de voc√™. 
          A sensa√ß√£o √© viciante e aterrorizante ao mesmo tempo.

          Voc√™ entende, no fundo, que algo mudou para sempre.

          Sua habilidade √© Eletrocinese.`;

      break;
    default:
      break;
  }
  // Revela o talento na interface
const talentLine = document.getElementById("talent-line");
if (talentLine) talentLine.style.display = "block";
updateSidebar();

    changeScene(story, () =>{
    criarBotaoHistoria("Continuar", backStory3);
  })
}
 
function backStory3() {
  advanceTime(30, 15, 3);
  meetCharacter("Jo√£o Jos√©");
  const story = `Alguns dias se passaram e voc√™ est√° no vel√≥rio de seus pais, foi um dia triste, mas necess√°rio, voc√™ pode se despedir adquadamente, surpeendentemente, a dor do seu luto diminui, e isso faz voc√™ se sentir estranho.
  
  O dia se passa e v√°rios familiares aparecem, afinal seus pais eram muito amados pela fam√≠lia, mas todos sabiam que voc√™ era quem sofria mais, ent√£o todos te abra√ßavam e ofereciam ajuda, que voc√™ educadamente recusava, afinal, voc√™ j√° tinha um objetivo em mente: descobrir o que matou seus pais.
  
  Afinal, a autopsia n√£o revelou nada, e isso n√£o saia da sua cabe√ßa.
  
  Seus pensamentos s√£o interrompidos quando um homem que voc√™ nunca viu aparece, ele aparenta estar procurando algu√©m e quando ele olha para voc√™, parece que ele encontrou.
  
  O homem caminha em sua dire√ß√£o lentamente, com uma express√£o resoluta. Seu terno preto, junto com seu fedora tamb√©m preto, seus cabelos dourados se destacavam por ser a √∫nica coisa al√©m de sua pele branca que n√£o eram pretos.
  
  Quando chega em voc√™, o homem tira seu chap√©u e faz uma mensura.
  
  "Meu nome √© Jo√£o Jos√©, meus p√™sames por sua perda, senhor ${player.name}. Sinto muito ter que dar mais uma not√≠cia ruim para voc√™, mas..." ‚Äî dimnuindo a voz, quase um cochicho ele continuou "voc√™ foi descoberto. Na verdade, n√£o ainda. Mas o governo sabe que nasceu um super. Eu dei um jeito de que as coisas ainda n√£o apontem para voc√™, mas nada que fosse definitivo. Sei que √© estranho e sua cabe√ßa deve estar a mil agora, mas preciso que venha comigo. Posso te deixar seguro."`;

    changeScene(story, () =>{
    criarBotaoHistoria("Aceitar ir com o desconhecido", strangeMan);
    criarBotaoHistoria("Recusar ir com o desconhecido", backStory4);
  })
  }

  function backStory4(){
    changeFriendship("Jo√£o Jos√©", -5)
    const story = `Voc√™ nega, n√£o importa quem esse homem √©, tudo isso parece ser uma armadilha "como ele sabe meu nome?" e "como ele descobriu o que eu sou?" s√£o algumas das perguntas que passam por sua mente, voc√™ n√£o pode confiar nele.
    
    Algo na entrada do cemit√©rio chama a sua aten√ß√£o, um carro chega, um carro preto, lentamente entrando e indo at√© o estacionamento, voc√™ nunca viu esse carro antes, e s√≥ tem voc√™s ali, isso √© estranho. 
    
    A aten√ß√£o de Jo√£o Jos√© tamb√©m vai at√© o carro, e quando ele volta a aten√ß√£o at√© voc√™, sua expre√ß√£o √© de medo.
    
    "Eles chegaram!" diz ele, pegando do seu bra√ßo com uma for√ßa que voc√™ n√£o imaginava que ele tinha e te puxando com ele.`;

    changeScene(story, () =>{
    criarBotaoHistoria("Deixar que ele te leve", strangeMan);
    criarBotaoHistoria("Resistir", recuseStrangeMan);
  })
  }

function strangeMan(){
  const story = `Voc√™ deixa o homem te levar at√© o seu carro, ele abre a porta de tr√°s para voc√™ e faz a volta para ir at√© o banco do motorista "Eu queria te deixar na frente, mas n√≥s precisamos pegar algu√©m no caminho e... Digamos que ela gosta muito de sentar no banco da frente."`;

  changeScene(story, () =>{
    criarBotaoHistoria("Continuar", strangeManCar);
  })
}

function strangeManCar(){
  advanceTime(20, 1);
  const story = `Voc√™s andam um pouco, na janela, voc√™ pode ver que est√° em uma estrada de terra, algumas √°rvores aparecem peri√≥dicamente, o calor √© suprimido pelo ar-condicionado do carro, ent√£o a viagem √© agradavel apesar de tudo. 
  
  Depois de alguns minutos, o carro diminui a velocidade e para. 
  
  A porta do carona abre r√°pidamente e uma pessoa coberta por uma capa entra e fecha a porta j√° dando espa√ßo para o carro andar.
  
  "Senhor ${player.name}, te apresento a senhorita Maria, ela tamb√©m √© uma super, como voc√™, tamb√©m √© a lider desta organiza√ß√£o. Antes que n√≥s cheguemos, eu gostaria de pedir desculpas pela forma que nos conhecemos, acredite em mim, eu gostaria de ter conseguido te achar antes, mas eu nunca consegui te localizar nem mesmo com outros supers que tinham habilidade para isso. Tamb√©m queria que tiv√©ssemos tido tempo para te explicar as coisas e n√£o precisarmos de todo esse fuzu√™, mas n√£o se preocupe, n√£o existe lugar mais seguro para voc√™ do que nossa organiza√ß√£o."`;

    changeScene(story, () =>{
    criarBotaoHistoria("Continuar", strangeManCar2);
  })
}

function recuseStrangeMan() {
  changeFriendship("Jo√£o Jos√©", -5);
  const story = `Voc√™ for√ßa e n√£o deixa o homem te levar, o que n√£o agrada nem um pouco ele, que aumenta a for√ßa e fala com a voz irritada "Voc√™ quer morrer garoto? Eles est√£o aqui para descobrir quem √© o super, se te acharem, sua vida vai acabar. Eu queria poder te dar uma escolha, mas n√£o √© assim que o mundo funciona, n√£o vou deixar que voc√™ acabe com a sua vida dessa forma"
  
  Ele solta seu bra√ßo e se prepara para luta.`;

  changeScene(story, (choices) => {
    const foundBtn = document.createElement("button");
    foundBtn.innerText = "Em guarda";
    foundBtn.onclick = () => startBattle("Jo√£o Jos√©");
    choices.appendChild(foundBtn);
  }, 300, "powerText", "powerChoices");
}

function strangeManWins() {
  dormir(20,1);
  const story = `Voc√™ acorda no banco de tr√°s de um carro em movimento, dirigido por aquele homem de antes.
  
  Voc√™ levanta r√°pido e ele logo diz "Voc√™ dormiu bem? O que eu usei em voc√™ foi s√≥ um dardo tranquilizante, afinal, eu n√£o podia deixar voc√™ ficar fazendo aquele drama todo e estragar toda a opera√ß√£o".`;

    changeScene(story, () =>{
    criarBotaoHistoria("Ficar calado", aceptStrangeMan2);
    criarBotaoHistoria(`"Voc√™ me sequestrou"`, recuseStrangeMan2);
  })
}

function aceptStrangeMan2(){
  const story = `Voc√™ fica quieto e o homem acena com a cabe√ßa em aprova√ß√£o. N√≥s vamos precisar pegar uma pessoa no caminho, e ent√£o vamos para a base, te apresentar para os outros.`;

    changeScene(story, () =>{
    criarBotaoHistoria("Continuar", strangeManCar);
  })
}
function recuseStrangeMan2(){
    const story = `"Voc√™ n√£o me deu escolha, queria que eu fizesse o que? Deixasse que eles nos capturassem?" sua voz fica fria, exalando irrita√ß√£o "N√£o me fa√ßa atirar de novo. Fique quieto que j√° estamos chegando."`;

    changeScene(story, () =>{
    criarBotaoHistoria("Continuar", strangeManCar);
  })
}

function strangeManCar2(){
  const story = `"Pe√ßo desculpas pelas a√ß√µes do Senhor Jo√£o, ${player.name}, ele n√£o √© algu√©m muito gentil, espero que voc√™ n√£o tenha tido problemas com ele" ela vira para voc√™ e te da um sorriso amig√°vel "Como eu tenho certeza que ele n√£o te explicou nada, por favor, me permita te dizer o que somos n√≥s. N√≥s somos a associa√ß√£o Super Humanos, protegemos e auxiliamos pessoas como voc√™, tanto a se esconder quanto a dar uma vida normal. Mas isso √© voc√™ quem decidir√°, apenas queremos que mais pessoas como voc√™ consigam viver vidas normais da melhor forma poss√≠vel, afinal, voc√™ sabe o que acontece com os super que o governo acha primeiro." um sil√™ncio m√≥rbido se instala no carro, at√© que a mulher continua "Mas n√≥s n√£o precisamos falar disso, desde a nossa funda√ß√£o, nunca algo ruim aconteceu com algum super, como l√≠der da compainha, me orgulho em falar que nenhum de nossos protegidos foram pegos, e os que foram, hoje est√£o vivos e bem na nossa base central."
  
  O carro para.
  
  "Senhoras e senhores, chegamos!" diz Jo√£o, retirando o sinto e saindo do carro para abrir a porta do carona para Maria, que por sua vez, abre a porta para voc√™.`;

  changeScene(story, () =>{
    criarBotaoHistoria("Continuar", baseSuper);
  })
}
function baseSuper(){
  const story = `Voc√™s saem do carro e andam pelas instala√ß√µes, v√°rias pessoas trabalhando, alguns super treinando, e todos que passam por voc√™s, comprimentam um a um, definitivamente o ambiente √© agrad√°vel, quando entram dentro de um estabelecimento, Maria come√ßa a guiar o caminho, parando em um quarto, o n√∫mero 245 estampado do lado da porta: 

  "Este vai ser o seu quarto senhor ${player.name}, voc√™ ira dividir o quarto com uma pessoa que tamb√©m acabou de chegar aqui" ela bate na porta e um homem que aparenta ter a sua idade, cabelos escuros e olhos verdes que constrastam com sua pele clara abre a porta, ele est√° vestindo o mesmo uniforme branco que todos os outros que estavam l√° fora "Este √© o senhor Leandro" diz Maria apontando para a pessoa, e depois aponta para voc√™ "e este √© o senhor ${player.name}, espero que voc√™s consigam se adaptar, sei que voc√™s devem estar cansados e que a vinda para c√° pode ter sido estressante, mas por favor, durmam e jantem, amanh√£ voc√™s ter√£o todas as respostas de que precisam."`;

  changeScene(story, () => {
    criarBotaoHistoria("Entrar no quarto", quarto1);
  })
}

function quarto1(){
  const story = `Voc√™ est√° no quarto, Leandro est√° deitado na cama de cima, ele parece t√£o t√≠mido quanto voc√™.`
  changeScene(story, () =>{
    criarBotaoHistoria("Conversar com Leandro", quartoLeando);
    criarBotaoHistoria("Comer", comerSozinho)
    criarBotaoHistoria("Dormir", quartoLeandoDormir);
  })
}

function comerSozinho(){
  const story = `Voc√™ come sozinho, o p√£o est√° delicioso, mas a bebida voc√™ n√£o consegue distinguir o gosto, ainda assim est√° boa.`;
  player.hunger = 100;
  updateSidebar();
  changeScene(story, () =>{
    criarBotaoHistoria("Conversar com Leandro", quartoLeando);
    criarBotaoHistoria("Dormir", quartoLeandoDormir);
  })
}

function quartoLeando(){

  let skillFalada = ``;

  switch (player.powerType) {
    case "Pirocinese": skillFalada = `eu consigo criar e controlar o fogo`;
      break;
    case "Criogenese": skillFalada = `eu consigo criar e controlar o gelo`;
      break;
    case "Telecinese": skillFalada = `eu consigo controlar as coisas com a mente`;
      break;
    case "Eletrocinese": skillFalada = `eu consigo criar e controlar a eletricidade`;
    default:
      break;
  }

    let story = `Voc√™ chega perto de Leandro e ele se empertiga "Oi!", voc√™ acena para ele que responde "Voc√™ tamb√©m tem poderes?"
  "Sim", voc√™ responde "${skillFalada}", e voc√™?
  "Ehh... Eu s√≥ consigo trocar a cor das coisas... √â meio in√∫til, eu sei, mas pelo menos, minhas roupas nunca parecem sujas", ele d√° um sorriso, que logo se espelha em seu rosto.
  "Como voc√™ descobriu o seu poder?", pergunta Leandro, meio sem jeito "Claro, se n√£o for muito pessoal"`;

  changeScene(story, () =>{
    criarBotaoHistoria("Falar", falar1);
    criarBotaoHistoria("N√£o falar", ficarCalado1);
  })
}

function falar1(){
  switch (player.powerType) {
    case "Pirocinese": skillFalada = `o quarto estava queimando, tudo estava muito quente, foi assim que eu pecebi que o meu poder era com o fogo.`;
      break;
    case "Criogenese": skillFalada = `o quarto havia congelado, pilares de gelo come√ßaram a brotar do ch√£o... foi a√≠ que eu perecebi que o meu poder era com o gelo.`;
      break;
    case "Telecinese": skillFalada = `todas as coisas do quarto come√ßaram a flutuar, at√© mesmo eu flutuava, e minha cabe√ßa do√≠a, do√≠a muito, quando a dor passou, todas as coisas voltaram para o ch√£o.`;
    default:
    case "Eletrocinese": skillFalada = `eu senti uma corrente el√©trica passando por mim que me fez tremer, aquilo n√£o era poss√≠vel, at√© que tudo que era el√©trico come√ßou a explodir e eu sentia como se fosse em mim, mas eu consegui me conter antes de acontecer algo de perigoso.`;
      break;
  }
  let story = `Voc√™ respira, a mem√≥ria do que aconteceu ainda viva na sua mente, depois de alguns segundos, voc√™ consegue falar: 
  
  "A poucos dias, os meus pais morreram, e o choque foi imenso... quando eu percebi ${skillFalada}"`;

  changeScene(story, () =>{
    criarBotaoHistoria("continuar", dormirLeandro);
  })
}

function ficarCalado1(){
 const story = `Voc√™ respira fundo, lembrando das coisas que aconteceram quando voc√™ perdeu seus pais, voc√™ tenta falar mas as palavras prendem na sua garganta.
  
  "Desculpa, √© muito dif√≠cil falar disso, espero que voc√™ entenda que n√£o √© nada pessoal."
  
  "Tudo bem" diz ele, envergonhado de ter feito uma pergunta muito pessoal "eu entendo, t√™m muitas coisas dif√≠ceis acontecendo com a gente esses dias."`;

  changeScene(story, () =>{
    criarBotaoHistoria("Continuar", fome);
  })
}

function fome(){
  const story = `Um barulho alto sai do seu est√¥mago, sinalizando que voc√™ est√° com fome, antes que voc√™ possa ficar envergonhado, o mesmo som ecoa de Leandro:
  
  "Vamos comer? N√£o sei o que √© aquilo, mas parece delicioso" diz leandro, apontando para dois copos contendo um liquido estranho e alguns p√£es em cima de uma mesa, ele espera voc√™ ir para seguir atr√°s de voc√™.`;
  changeScene(story, () =>{
    criarBotaoHistoria("Jantar com Leandro", jantarLeandro);
  })
}

function jantarLeandro(){
  const story = `Voc√™s come√ßam a comer, o gosto √© estranho no in√≠cio, mas o l√≠quido come√ßa a ficar saboroso, quanto mais voc√™ toma, menos sabe o que √©. Voc√™ olhar para Leandro e parece que esta d√∫vida se espelha nele, mas voc√™s eventualmente acabam comendo tudo.`;
  player.hunger = 100;
  updateSidebar();
  changeScene(story, () =>{
    criarBotaoHistoria("Dormir", dormirLeandro);
  })
}
changeFriendship
function dormirLeandro(){
  const story = ``;
  changeScene(story, () =>{
    criarBotaoHistoria("...", dormirLeandro);
  })
}

function quartoLeandoDormir(){
  const story = `Voc√™ silenciosamente deita na cama de baixo, cansado e ainda confuso, voc√™ tenta dormir.`;
  dormir(0, 9);
  player.hunger = 100;
  updateSidebar();
  changeScene(story, () =>{
    criarBotaoHistoria("Acordar", quarto1)
  })
}
function startStory() {
  const story = `Um drone do governo se aproxima. O que voc√™ faz?`;

  changeScene(story, (choices) => {
    const fightBtn = document.createElement("button");
    fightBtn.innerText = "Enfrentar o drone";
    fightBtn.onclick = () => startBattle("Drone de Captura");

    const hideBtn = document.createElement("button");
    hideBtn.innerText = "Tentar se esconder";
    hideBtn.onclick = () => hideFromDrone();

    choices.appendChild(fightBtn);
    choices.appendChild(hideBtn);
  }, 300, "storyText", "choices");
}

function hideFromDrone() {
  const story = `Voc√™ se esconde atr√°s de destro√ßos. 
O drone passa lentamente, escaneando a √°rea. Por um momento, o sil√™ncio √© absoluto... 
at√© que a luz vermelha se volta para voc√™.`;

  changeScene(story, (choices) => {
    const foundBtn = document.createElement("button");
    foundBtn.innerText = "O drone te encontrou!";
    foundBtn.onclick = () => startBattle("Drone de Captura");
    choices.appendChild(foundBtn);
  }, 300, "storyText", "choices");
}

/* ========== COMBATE ========== */

/* =========================
   LISTA DE INIMIGOS
========================= */
let enemy = {};

const enemies = {
  drone: {
    name: "Drone de Captura",
    maxHp: 50,
    hp: 50,
    attack: 10,
    defense: 5,
    powerType: "El√©trico",
    status: {},
    description: "Um drone enviado pelo governo para ca√ßar supers.",
  },

  joaoJose: {
    name: "Jo√£o Jos√©",
    maxHp: 120,
    hp: 120,
    attack: 14,
    defense: 10,
    powerType: "F√≠sico",
    status: {},
    description: "Um homem comum, mas com treinamento militar. Seus golpes s√£o precisos e frios.",
  },
};

/* =========================
   IN√çCIO DO COMBATE
========================= */
function startBattle(enemyName = "Drone de Captura") {

  // limpa textos e bot√µes da hist√≥ria
const textArea = document.getElementById("powerText");
const choicesArea = document.getElementById("powerChoices");
if (textArea) textArea.innerHTML = "";
if (choicesArea) choicesArea.innerHTML = "";

  // esconde qualquer tela de hist√≥ria que ainda esteja vis√≠vel
const storyScreens = ["power-screen", "story-screen"];
storyScreens.forEach(id => {
  const el = document.getElementById(id);
  if (el) el.style.display = "none";
});

const battle = document.getElementById("battle-screen");
  if (battle) battle.style.display = "block";

const logBox = document.getElementById("battle-log");
if (logBox) logBox.innerHTML = "";


  // procura o inimigo na lista
  const foundEnemy = Object.values(enemies).find(e => e.name === enemyName);
  if (foundEnemy) {
    enemy = structuredClone(foundEnemy);
  } else {
    enemy = { name: enemyName, hp: 50, maxHp: 50, attack: 8, defense: 5, powerType: "F√≠sico", status: {} };
  }

  document.getElementById("story-screen").style.display = "none";
  document.getElementById("battle-screen").style.display = "block";
  const pn = document.getElementById("playerName"); if (pn) pn.innerText = player.name;
  const en = document.getElementById("enemy-name"); if (en) en.innerText = enemy.name;

  player.hp = Math.min(player.hp, player.maxHp);
  player.mana = Math.min(player.mana, player.maxMana);
  player.defending = false;

  updateBars();
  updateSkills();
  log(`‚öîÔ∏è ${enemy.description || "Um inimigo apareceu!"}`);
}


function updateBars() {
  const pct = (v,m) => Math.max(0, Math.min(100, (v/m)*100));
  const pHp = document.getElementById("player-hp-fill");
  const pMana = document.getElementById("player-mana-fill");
  const eHp = document.getElementById("enemy-hp-fill");
  if (pHp) pHp.style.width = pct(player.hp, player.maxHp) + "%";
  if (pMana) pMana.style.width = pct(player.mana, player.maxMana) + "%";
  if (eHp) eHp.style.width = pct(enemy.hp, enemy.maxHp) + "%";
  updateSidebar();
}

function updateStatusIcons() {
  const playerStatusEl = document.getElementById("player-status");
  const enemyStatusEl = document.getElementById("enemy-status");
  if (!playerStatusEl || !enemyStatusEl) return;

  const emojiMap = {
    burning: "üî•",
    frozen: "‚ùÑÔ∏è",
    bleeding: "ü©∏",
    confused: "üí´",
    blinded: "üåÄ",
    paralizado: "‚ö°"
  };
  const descMap = {
    burning: "Queimando ‚Äî perde HP a cada turno.",
    frozen: "Congelado ‚Äî ataque para causar muito dano.",
    bleeding: "Sangramento ‚Äî sofre dano cont√≠nuo.",
    confused: "Confuso ‚Äî chance de perder o turno.",
    blinded: "Cego ‚Äî ataques t√™m chance de errar.",
    paralizado: "Paralizado ‚Äî perde um turno."
  };

  const makeIcons = (entity) => {
    if (!entity.status) return "";
    return Object.keys(entity.status)
      .filter(s => entity.status[s].turns > 0)
      .map(s => {
        const emoji = emojiMap[s] || "?";
        const desc = descMap[s] || s;
        return `<span class="status-icon" data-tip="${desc}">${emoji}</span>`;
      })
      .join("");
  };

  playerStatusEl.innerHTML = makeIcons(player);
  enemyStatusEl.innerHTML = makeIcons(enemy);
}

/* Chame updateStatusIcons() sempre que atualizar turnos ou barras */
function updateBars() {
  const pct = (v,m) => Math.max(0, Math.min(100, (v/m)*100));
  document.getElementById("player-hp-fill").style.width = pct(player.hp, player.maxHp) + "%";
  document.getElementById("player-mana-fill").style.width = pct(player.mana, player.maxMana) + "%";
  document.getElementById("enemy-hp-fill").style.width = pct(enemy.hp, enemy.maxHp) + "%";
  updateSidebar();
  updateStatusIcons(); 
}

/* Narrador din√¢mico + aplica efeitos visuais */
function narrateAttack(attacker, defenderName, damage, isCrit, wasDefended, attackType = "fisico") {
  let narration = "";

  if (attacker === "player" && isCrit) {
    switch (attackType) {
      case "Pirocinese":
        narration = `üî• ${player.name} desencadeia uma explos√£o de chamas ‚Äî cr√≠tico! ${defenderName} √© engolido pelo fogo.`;
        applyStatus(enemy, "burning", 3, Math.max(2, Math.round(enemy.maxHp*0.03)));
        break;
      case "Criogenese":
        narration = `‚ùÑÔ∏è Um golpe g√©lido perfeito! ${player.name} congela partes do ${defenderName}, causando dano cr√≠tico.`;
        applyStatus(enemy, "frozen", 2);
        break;
      case "Telecinese":
        narration = `üåÄ ${player.name} arremessa o ${defenderName} com for√ßa total ‚Äî impacto cr√≠tico!`;
        applyStatus(enemy, "confused", 2);
        break;
      case "Eletrocinese":
        narration = `‚ö° ${player.name} atinge ${defenderName} com um raio intenso ‚Äî causando uma descarga neural!`;
        applyStatus(enemy, "paralizado", 1);
        break;
      default:
        narration = `üí• ${player.name} desfere um ataque devastador, um cr√≠tico que faz o ${defenderName} cambalear!`;
        applyStatus(enemy, "confused", 2);
    }
    hpShake("enemy");
  } else if (attacker === "player") {
    if (attackType === "fisico"){ 
      narration = `${player.name} ataca o ${defenderName}, causando ${damage} de dano.`
  }else {
      narration = `${player.name} usa ${attackType.toLowerCase()} e causa ${damage} de dano ao ${defenderName}.`;
    }
  }

  if (attacker === "enemy" && isCrit) {
    switch (defenderName) {
      case "Drone de Captura":
        narration = `üí• O ${defenderName} dispara uma rajada concentrada! ${player.name} sente o impacto percorrer o corpo!`;
        applyStatus(player, "confused", 2);
        break;
      default:
        narration = `üí• ${defenderName} acerta um golpe cr√≠tico em ${player.name}!`;
        applyStatus(player, "confused", 2);
        if (hasStatus(player, "frozen")) {
          damage *= 2;
          clearStatus(player, "frozen");
          log(`‚ùÑÔ∏è O gelo que envolvia ${player.name} se quebra com o impacto!`);
          // se quebrar gelo, aplica sangramento por sinergia
          applyStatus(player, "bleeding", 3, 8);
        }
    }
    hpShake("player");
  } else if (attacker === "enemy" && wasDefended) {
    narration = `${defenderName} atacou, mas ${player.name} defendeu parcialmente, reduzindo o dano.`;
  } else if (attacker === "enemy" && !isCrit && !wasDefended) {
    narration = `${defenderName} atacou e causou ${damage} de dano em ${player.name}.`;
    player.hp = matchMedia.max(0, player.hp - damage);

  }

  if (narration) log(narration);
}

/* ===== A√á√ïES DO JOGADOR ===== */
function attack() {
  if (!processStatuses(player, "player")) { if (enemy.hp > 0 && player.hp > 0) setTimeout(enemyAttack, 800); return; }
  const blindMiss = hasStatus(player, "blinded") ? 0.35 : 0;
  if (Math.random() < blindMiss) { log(`${player.name} tentou atacar, mas estava cego e errou!`); if (enemy.hp > 0) setTimeout(enemyAttack, 800); return; }

  const critChance = 0.15;
  const isCrit = Math.random() < critChance;
  const base = Math.floor(Math.random()*8) + 8;
  let damage = isCrit ? base*2 : base;

  if (hasStatus(enemy, "frozen")) {
    damage *= 2;
    clearStatus(enemy, "frozen");
    log(`‚ùÑÔ∏è O gelo que envolvia ${enemy.name} se quebra com o impacto!`);
    // se quebrar gelo, aplica sangramento por sinergia
    applyStatus(enemy, "bleeding", 3, 8);
  }

  enemy.hp = Math.max(0, enemy.hp - damage);
  narrateAttack("player", enemy.name, damage, isCrit, false, "fisico");

  updateBars();
if (enemy.hp <= 0) {
  if(enemy.name == "Jo√£o Jos√©"){
    log(`${enemy.name} puxa uma pistola e dispara contra voc√™. "Voc√™ me for√ßou a isso Senhor ${player.name}"`);
    log("Voc√™ desmaia.");
    const logBox = document.getElementById("battle-log");
  if (logBox) {
    const btn = document.createElement("button");
    btn.innerText = "Continuar";

    // usa o estilo padr√£o dos bot√µes do jogo
    btn.onclick = () => {
      document.getElementById("battle-screen").style.display = "none";
      document.getElementById("power-screen").style.display = "block";
      if(enemy.name == "Jo√£o Jos√©"){
        strangeManWins(); // retorna para a hist√≥ria
      }

    };

    // adiciona o bot√£o diretamente ao log
    logBox.appendChild(btn);
    logBox.scrollTop = logBox.scrollHeight;
  }

  }
  if(enemy.name != "Jo√£o Jos√©"){
    log(` ${enemy.name} foi derrotado!`);
      // Cria o bot√£o de continuar dentro do log
  const logBox = document.getElementById("battle-log");
  if (logBox) {
    const btn = document.createElement("button");
    btn.innerText = "Continuar";

    // usa o estilo padr√£o dos bot√µes do jogo
    btn.onclick = () => {
      document.getElementById("battle-screen").style.display = "none";
      document.getElementById("story-screen").style.display = "block";
      startStory(); // retorna para a hist√≥ria
    };

    // adiciona o bot√£o diretamente ao log
    logBox.appendChild(btn);
    logBox.scrollTop = logBox.scrollHeight;
  }

  return; // evita continuar o turno ap√≥s a morte do inimigo
  }

}
  else setTimeout(enemyAttack, 900);
}

function defend() {
  if (!processStatuses(player, "player")) { if (enemy.hp>0) setTimeout(enemyAttack,900); return; }
  player.defending = true;
  log(`${player.name} assume uma postura defensiva.`);
  setTimeout(enemyAttack, 900);
}

function flee() {
  log(`${player.name} tentou fugir!`);
  document.getElementById("battle-screen").style.display = "none";
  document.getElementById("story-screen").style.display = "block";
}

function usePower() {
  if (!processStatuses(player, "player")) { if (enemy.hp > 0) setTimeout(enemyAttack, 900); return; }
  if (!player.powerType) { log("Voc√™ ainda n√£o descobriu seu poder!"); return; }

  const manaCost = 15;
  if (player.mana < manaCost) { log("Mana insuficiente!"); return; }

  const blindMiss = hasStatus(player, "blinded") ? 0.25 : 0;
  if (Math.random() < blindMiss) {
    log(`${player.name} tentou usar o poder, mas estava cego e errou!`);
    setTimeout(enemyAttack, 900);
    return;
  }

  const isCrit = Math.random() < 0.18;
  player.mana = Math.max(0, player.mana - manaCost);
  let base = Math.floor(Math.random() * 10) + 8;
  let damage = isCrit ? base * 2 : base;

  // === EFEITOS POR PODER ===
  switch (player.powerType) {
    case "Pirocinese":
      damage += 4;
      enemy.hp = Math.max(0, enemy.hp - damage);
      narrateAttack("player", enemy.name, damage, isCrit, false, "Pirocinese");
      if (isCrit) applyStatus(enemy, "burning", 3, Math.max(2, Math.round(enemy.maxHp * 0.03)));
      break;

    case "Criogenese":
      damage += 2;
      enemy.hp = Math.max(0, enemy.hp - damage);
      narrateAttack("player", enemy.name, damage, isCrit, false, "Criogenese");
      if (isCrit) applyStatus(enemy, "frozen", 2);
      break;

    case "Telecinese":
      damage += 3;
      enemy.hp = Math.max(0, enemy.hp - damage);
      narrateAttack("player", enemy.name, damage, isCrit, false, "Telecinese");
      if (isCrit) applyStatus(enemy, "confused", 2);
      break;

    case "Eletrocinese":
      damage += 4;
      enemy.hp = Math.max(0, enemy.hp - damage);
      narrateAttack("player", enemy.name, damage, isCrit, false, "Eletrocinese");
      if(isCrit) applyStatus(enemy, "paralizado", 1);
      break;
  }

  updateBars();


  if (enemy.hp <= 0) {
  if(enemy.name == "Jo√£o Jos√©"){
    log(`${enemy.name} puxa uma pistola e dispara contra voc√™. "Voc√™ me for√ßou a isso Senhor ${player.name}"`);
    log("Voc√™ desmaia.");
    const logBox = document.getElementById("battle-log");
  if (logBox) {
    const btn = document.createElement("button");
    btn.innerText = "Continuar";

    // usa o estilo padr√£o dos bot√µes do jogo
    btn.onclick = () => {
      document.getElementById("battle-screen").style.display = "none";
      document.getElementById("power-screen").style.display = "block";
      if(enemy.name == "Jo√£o Jos√©"){
        strangeManWins(); // retorna para a hist√≥ria
      }

    };

    // adiciona o bot√£o diretamente ao log
    logBox.appendChild(btn);
    logBox.scrollTop = logBox.scrollHeight;
  }

  }
  if(enemy.name != "Jo√£o Jos√©"){
    log(` ${enemy.name} foi derrotado!`, true);
  }
  }else setTimeout(enemyAttack, 900);
}

/* ========================= DESCRI√á√ïES DE ATAQUES DOS INIMIGOS ========================= */
function getEnemyAttackDescription(enemyName) {
  switch (enemyName) {
    case "Jo√£o Jos√©":
      return [
        "Jo√£o Jos√© ataca seu rosto com for√ßa!",
        "Jo√£o Jos√© desfere um chute certeiro em suas costelas!",
        "Jo√£o Jos√© d√° um soco r√°pido em seu abd√¥men!",
        "Ele avan√ßa com precis√£o e te acerta um golpe potente!",
        "Jo√£o Jos√© te golpeia com a frieza de um soldado treinado!"
      ][Math.floor(Math.random() * 5)];

    case "Drone de Captura":
      return [
        "O Drone dispara lasers el√©tricos em sua dire√ß√£o!",
        "O Drone trava sua mira e atira uma rajada energ√©tica!",
        "O Drone vibra no ar e lan√ßa uma descarga contra voc√™!"
      ][Math.floor(Math.random() * 3)];

    default:
      return `${enemyName} ataca impiedosamente!`;
  }
}

/* ========== ATAQUE DO INIMIGO ========== */
function enemyAttack() {
  if (!processStatuses(enemy, "enemy")) { return; }

  const blindMiss = hasStatus(enemy, "blinded") ? 0.25 : 0;
  const missChance = 0.1 + blindMiss;
  if (Math.random() < missChance) { log(`${enemy.name} errou o ataque!`); return; }

  const isCrit = Math.random() < 0.15;
  let base = Math.floor(Math.random()*enemy.attack) + 6;
  let damage = isCrit ? base*2 : base;

  const wasDefended = player.defending;
  if (wasDefended) { damage = Math.floor(damage/2); player.defending = false; }

  if (hasStatus(player,"frozen")) { damage *= 2; clearStatus(player,"frozen"); log(`‚ùÑÔ∏è O gelo que cobria ${player.name} se quebra com o impacto!`); applyStatus(player,"bleeding",3,8); }

  log(getEnemyAttackDescription(enemy.name)); // mensagem de ataque personalizada

  player.hp = Math.max(0, player.hp - damage);
  if(player.hp <=0){
    player.hp = 0;
    updateBars();
    log(`‚ò†Ô∏è ${player.name} foi derrotado...`)
    const logBox = document.getElementById("battle-log");
   if (logBox) {
     const btn = document.createElement("button");
     btn.innerText = "Continuar";
 
     // usa o estilo padr√£o dos bot√µes do jogo
     btn.onclick = () => {
       document.getElementById("battle-screen").style.display = "none";
       document.getElementById("power-screen").style.display = "block";
       if(enemy.name == "Jo√£o Jos√©"){
         strangeManWins(); // retorna para a hist√≥ria
       }
      };

          // adiciona o bot√£o diretamente ao log
    logBox.appendChild(btn);
    logBox.scrollTop = logBox.scrollHeight;

    }
    return;
    
  }
  updateBars();
  if (isCrit) hpShake("player");

  
  // inimigo cr√≠tico pode aplicar bleed
  if (isCrit) {
    if (enemy.name === "Drone de Captura" && Math.random() < 0.35) applyStatus(player,"bleeding",3,6);
  }

  if (isCrit) narrateAttack("enemy", enemy.name, damage, true, wasDefended);
  else narrateAttack("enemy", enemy.name, damage, false, wasDefended);

  updateBars();
  if (player.hp <= 0){
    player.hp = 0;
    updateBars();
    log(`‚ò†Ô∏è ${player.name} foi derrotado...`)
   const logBox = document.getElementById("battle-log");
  if (logBox) {
    const btn = document.createElement("button");
    btn.innerText = "Continuar";

    // usa o estilo padr√£o dos bot√µes do jogo
    btn.onclick = () => {
      document.getElementById("battle-screen").style.display = "none";
      document.getElementById("power-screen").style.display = "block";
      if(enemy.name == "Jo√£o Jos√©"){
        strangeManWins(); // retorna para a hist√≥ria
      }

    };

    // adiciona o bot√£o diretamente ao log
    logBox.appendChild(btn);
    logBox.scrollTop = logBox.scrollHeight;
  }

  return; // evita continuar o turno ap√≥s a morte do inimigo
}
  } 

/* ========== CONTROLE DE TURNOS ========== */
function playerTurn(action) {
  action();
}

/* ========== LOG / NARRA√á√ÉO (com hist√≥rico colorido e scroll autom√°tico) ========== */
function log(msg) {
  const el = document.getElementById("battle-log");
  if (!el) return;

  const p = document.createElement("p");
  p.innerText = msg;

  // Define uma classe CSS com base no tipo da mensagem
  if (/üíÄ|‚ò†Ô∏è/i.test(msg)) p.classList.add("log-death");
  else if (/üî•|queim|Pirocinese|fogo/i.test(msg)) p.classList.add("log-fire");
  else if (/‚ùÑÔ∏è|gelo|Criogenese|frio/i.test(msg)) p.classList.add("log-ice");
  else if (/üåÄ|Telecinese|impacto/i.test(msg)) p.classList.add("log-tele");
  else if (/‚ö°|paralis|eletrocinese|raio/i.test(msg)) p.classList.add("log-eletric");
  else if (/üí•|cr√≠tico|critico/i.test(msg)) p.classList.add("log-crit");
  else if (/defendeu|reduzido|bloque/i.test(msg)) p.classList.add("log-defense");
  else if (/errou|falhou|confuso/i.test(msg)) p.classList.add("log-miss");
  else if (/sangra|sangramento/i.test(msg)) p.classList.add("log-bleed");
  else p.classList.add("log-normal");

  if (/cr√≠tico|critico/i.test(msg)) {
  p.style.fontWeight = "bold";
  p.style.textShadow = "0 0 6px red";
}

  el.appendChild(p);
  el.scrollTop = el.scrollHeight; // rola para o fim automaticamente
}


/* ========== SKILL BUTTONS ========== */
let playerSkills = [
  { name: "Atacar", action: () => playerTurn(attack) },
  { name: "Usar Poder", action: () => playerTurn(usePower) },
  { name: "Defender", action: () => playerTurn(defend) },
  { name: "Fugir", action: flee }
];
function updateSkills() {
  const container = document.getElementById("skill-buttons");
  if (!container) return;
  container.innerHTML = "";
  playerSkills.forEach(skill => {
    const btn = document.createElement("button");
    btn.innerText = skill.name;
    btn.onclick = skill.action;
    container.appendChild(btn);
  });
}

/* ========== INICIALIZA√á√ÉO FINAL ========== */
updateSidebar();
updateGameTimeDisplay();
